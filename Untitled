want = pd.read_csv('./data/ChelyabinskEnergyAltitude.csv')#, 19200, 3300, None, strength, angle):
print(want)

alt = want.iloc[0,0] * 1e3
x = np.linspace(20000, 42000, 1000)
want = want.sort_values(by='Height (km)', ascending=True)
xr = want.iloc[:, 0].values * 1000
yr = want.iloc[:, 1].values
#print(np.diff(xr))
#print(xr)
#print(yr)
f = si.PchipInterpolator(xr, yr, 10) 


plt.plot(xr, f(xr), 'b', label='approximation')
plt.scatter(xr, want.iloc[:, 1])
plt.show()


radii = np.linspace(5, 15, 10)
strengths = np.logspace(4, 7, 10)




earth = armageddon.Planet()

input = list(itertools.product(radii, strengths))

#print(input)
par = input[0]
print(alt)
#print(earth.solve_atmospheric_entry(par[0], 19200, 3300, par[1], 18.3, init_altitude=want.iloc[0, 0]))

computations = [dask.delayed(earth.solve_atmospheric_entry)
                (par[0], 19200, 3300, par[1], 18.3, init_altitude=alt, num_scheme='EE')
                for par in input]
dedz = [dask.delayed(earth.calculate_energy)(lazy) for lazy in computations]


#for pairs in input:
#    res = dask.delayed(earth.solve_atmospheric_entry)(r, 19200, 3300, s, 18.3, init_altitude=want.iloc[0, 0])
#    computaions.append(res)
    

results = dask.compute(*dedz, scheduler='processes')
#print(results)


dfs = [r[r.altitude > 21700] for r in results]

rms = [np.sqrt(np.mean(np.power(f(df.altitude) - (df.dedz), 2))) for df in dfs]

#print(rms)

index = np.argmin(rms)
print(index)

plt.plot(dfs[index].altitude, f(dfs[index].altitude), 'b', label='approximation')
plt.scatter(dfs[index].altitude, dfs[index].dedz)

plt.show()  